/*
MIT License

Copyright © 2018 Juan Peña

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

package decimaltobinary;

/**
 *
 * @author juanp
 */
public class DecimalToBinary extends javax.swing.JFrame {

    /**
     * Creates new form DecimalToBinary
     */
    public DecimalToBinary() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        NameLabel = new javax.swing.JLabel();
        ConvertTo = new javax.swing.JLabel();
        Decimal = new javax.swing.JLabel();
        Binary = new javax.swing.JLabel();
        BinarySys = new javax.swing.JComboBox<>();
        BinaryOutput = new javax.swing.JTextField();
        DecimalImput = new javax.swing.JTextField();
        ButtonConvert = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 102, 102));
        setIconImage(getIconImage());

        NameLabel.setText("Decimal To Binary");
        NameLabel.setToolTipText("");

        ConvertTo.setText("Convert to:");
        ConvertTo.setToolTipText("");

        Decimal.setText("Decimal");

        Binary.setText("Binary");

        BinarySys.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Binary", "Signed Binary", "One's Complement", "Two's Complement", "Excess 2⁽ⁿ⁻¹⁾" }));
        BinarySys.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BinarySysActionPerformed(evt);
            }
        });

        BinaryOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BinaryOutputActionPerformed(evt);
            }
        });

        DecimalImput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecimalImputActionPerformed(evt);
            }
        });

        ButtonConvert.setText("Convert");
        ButtonConvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonConvertActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(Binary, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Decimal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ConvertTo, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                        .addComponent(BinarySys, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DecimalImput)
                            .addComponent(BinaryOutput))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addComponent(ButtonConvert, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(95, 95, 95)
                .addComponent(NameLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(NameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BinarySys, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ConvertTo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Decimal)
                    .addComponent(DecimalImput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Binary)
                    .addComponent(BinaryOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(ButtonConvert)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void ButtonConvertActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
        BinaryOutput.setText(ConvertToBinary(BinarySys.getSelectedItem().toString(), Integer.parseInt(DecimalImput.getText())));
    }                                             

    private void BinaryOutputActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    }                                            

    private void DecimalImputActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    }                                            

    private void BinarySysActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
    }                                         
       
    public static int Excess(int number) { //might be removed, needs testing
    
        int MSB = 0; // Most Significant Bit
        int excess;

        while (number > 0) {
            number = number / 2;
            MSB++;
        }
        
        excess = (int) Math.pow(2, MSB);
        return excess;

    }
    
    public static String ConvertToBinary(String op, int number)
    {
    String str = "";
    int binary;
// ================================ [Binary] ================================

        if(op == "Binary") 
        {
                if(number < 0) str = "Invalid number";
                else if(number == 0) str = "0";
                else {
                    while(number > 0) {
                            binary = number % 2;
                            number = number / 2;
                            str = Integer.toString(binary) + str;
                    }
                }
        }

// ============================ [Signed Binary] ============================

        else if(op == "Signed Binary") 
        {
            if(number < 0) {
                number = Math.abs(number);
                while(number > 0) {
                        binary = number % 2;
                        number = number / 2;
                        str = Integer.toString(binary) + str;
                }
                str = "1" + str;
            }

            else {
                while(number > 0) {
                        binary = number % 2;
                        number = number / 2;
                        str = Integer.toString(binary) + str;
                }
                str = '0' + str;
            }
        }


// =========================== [One's complement] ===========================

        else if(op == "One's Complement") 
        {
            if(number < 0) 
            {
                while(number < 0) {
                    binary = number % 2;
                    number = number / 2;

                    if(binary == 0) binary = 1;
                    else binary = 0;

                    str = Integer.toString(binary) + str;
                }
                str = '1' + str;
            }

            else {
                while(number > 0) {
                    binary = number % 2;
                    number = number / 2;
                    str = Integer.toString(binary) + str;
                }
                str = '0' + str;
            }
        }

// =========================== [Two's complement] ===========================

        else if(op == "Two's Complement") {

            if(number == -1) str = "11"; //without this it will show 1 and not 11
            else if(number < 0) {
                number = number + 1;
                while(number < 0) {
                    binary = number % 2;
                    number = number / 2;

                    if(binary == 0) binary = 1;
                    else binary = 0;
                    str = Integer.toString(binary) + str;
                    } 
                str = '1' + str;
            }
            else {
                while(number > 0) {
                    binary = number % 2;
                    number = number / 2;
                    str = Integer.toString(binary) + str;
                }
                str = '0' + str;
            }
        }

// ============================= [Excess 2⁽ⁿ⁻¹⁾] =============================	

        else if(op == "Excess 2⁽ⁿ⁻¹⁾") { // needs testing
            if(number < 0) {
                number = Math.abs(number);
                //number = number + Excess(number);
                while(number > 0) {
                    binary = number % 2;
                    number = number / 2;
                    str = Integer.toString(binary) + str;
                }
                str = '0' + str;
            }

            else {
                //number = number + Excess(number);
                while(number > 0) {
                    binary = number % 2;
                    number = number / 2;
                    str = Integer.toString(binary) + str;
                }
                str = '1' + str;
            }
        }
        else return "Error";
        return str;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DecimalToBinary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DecimalToBinary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DecimalToBinary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DecimalToBinary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DecimalToBinary().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel Binary;
    private javax.swing.JTextField BinaryOutput;
    private javax.swing.JComboBox<String> BinarySys;
    private javax.swing.JButton ButtonConvert;
    private javax.swing.JLabel ConvertTo;
    private javax.swing.JLabel Decimal;
    private javax.swing.JTextField DecimalImput;
    private javax.swing.JLabel NameLabel;
    // End of variables declaration                   
}


// known bugs:

// excess 2n-1 shows its positive representation even when a negative number has been inserted (maybe fixed, but needs testing)
// 0 and -0 will be shown as 0 instead of 00 and 10 respectively in Signed Binary, One's Complement and two's complement